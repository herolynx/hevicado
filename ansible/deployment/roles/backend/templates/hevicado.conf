# repository settings for DB
repo {
  host = {{ mongo_name }}
  port = {{ mongo_db_port }}
  name = {{ mongo_db_name }}
  #used collections
  collections {
    tokens = tokens
    users = users
    calendar = calendar
  }
}

# services settings
service {
  # system name
  system = hevicado
  # max time for inner service communication (in seconds)
  max-timeout = 7
  # broadcast groups
  broadcast {
    users = broadcastUsers
  }
}

mail {
  host = localhost
  port = 25
  auth = false
  tls-enable = true
  templates {
    resource-loaded = file
    loader-class = org.apache.velocity.runtime.resource.loader.FileResourceLoader
    loader-path = "{{ home_dir }}/{{ mails_dir_name }}"
    cache = true
    #refresh cache time (in seconds)
    refresh = 120
    coding = UTF-8
  }
}

captcha {
  # server key
  private-key = "6Ld95gETAAAAAOIvZAf0248Ipn-4n6xsC7uroldL"
  # URL to server for verification purposes - URL must contain place-holder for key and response
  verification-url = "https://www.google.com/recaptcha/api/siteverify?secret=%s&response=%s"
  # name of the attribute where user response is placed
  response-att = "captcha"
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    debug {
      receive = on
      lifecycle = on
      log-sent-messages = on
      log-received-messages = on
    }
  }
  persistence.journal.leveldb.native = off
}

spray.can.server {
  request-timeout = 10s
}

web {
  interface = "0.0.0.0"
  port = 8000
  cors {
    allowed-clients = "*"
  }
  admin-token = "{{ web_admin_token }}"
}

kamon {

  metric {

    tick-interval = {{ kamon_flush_interval }} seconds

    filters {
      akka-actor {
        includes = ["**"]
        excludes = []
      }

      akka-dispatcher {
        includes = ["**"]
      }

      akka-router {
        includes = ["**"]
      }
    }

  }

  modules {

    kamon-system-metrics.auto-start = yes

    kamon-scala {
      // There is nothing to auto-start.
      auto-start = no
      requires-aspectj = yes
      extension-id = none
    }

    kamon-akka {
      auto-start = yes
      requires-aspectj = yes
      extension-id = "kamon.akka.Akka"
    }

    kamon-spray {
      auto-start = yes
      requires-aspectj = yes
      extension-id = "kamon.spray.Spray"
    }

    kamon-log-reporter {
      auto-start = {{ kamon_log_reporter_start }}
      requires-aspectj = no
      extension-id = "kamon.logreporter.LogReporter"
    }

    kamon-statsd {
      auto-start = {{ kamon_statsd_start }}
      requires-aspectj = no
      extension-id = "kamon.statsd.StatsD"
    }

  }

  statsd {

    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "{{ metrics_servers[0] }}"
    port = {{ statsd_port }}

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metric.tick-interval setting.
    flush-interval = {{ kamon_flush_interval }} seconds

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    subscriptions {
      histogram = ["**"]
      min-max-counter = ["**"]
      gauge = ["**"]
      counter = ["**"]
      trace = ["**"]
      trace-segment = ["**"]
      akka-actor = ["**"]
      akka-dispatcher = ["**"]
      akka-router = ["**"]
      system-metric = ["**"]
      http-server = ["**"]
    }

    # FQCN of the implementation of `kamon.statsd.MetricKeyGenerator` to be instantiated and used for assigning
    # metric names. The implementation must have a single parameter constructor accepting a `com.typesafe.config.Config`.
    metric-key-generator = kamon.statsd.SimpleMetricKeyGenerator

    simple-metric-key-generator {

      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "{{ app_name }}"

      # Includes the name of the hostname in the generated metric. When set to false, the scheme for the metrics
      # will look as follows:
      #    application.entity.entity-name.metric-name
      include-hostname = true

      # Allow users to override the name of the hostname reported by kamon. When changed, the scheme for the metrics
      # will have the following pattern:
      #   application.hostname-override-value.entity.entity-name.metric-name
      hostname-override = none

      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
      # with one of the following strategies:
      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
      metric-name-normalization-strategy = normalize
    }

  }

}
